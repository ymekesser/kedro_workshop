# Here you can define all your data sets by using simple YAML syntax.
#
# Documentation for this file format can be found in "The Data Catalog"
# Link: https://docs.kedro.org/en/stable/data/data_catalog.html
#
# We support interacting with a variety of data stores including local file systems, cloud, network and HDFS
#
# An example data set definition can look as follows:
#
#bikes:
#  type: pandas.CSVDataset
#  filepath: "data/01_raw/bikes.csv"
#
#weather:
#  type: spark.SparkDataset
#  filepath: s3a://your_bucket/data/01_raw/weather*
#  file_format: csv
#  credentials: dev_s3
#  load_args:
#    header: True
#    inferSchema: True
#  save_args:
#    sep: '|'
#    header: True
#
#scooters:
#  type: pandas.SQLTableDataset
#  credentials: scooters_credentials
#  table_name: scooters
#  load_args:
#    index_col: ['name']
#    columns: ['name', 'gear']
#  save_args:
#    if_exists: 'replace'
#    # if_exists: 'fail'
#    # if_exists: 'append'
#
# The Data Catalog supports being able to reference the same file using two different Dataset implementations
# (transcoding), templating and a way to reuse arguments that are frequently repeated. See more here:
# https://docs.kedro.org/en/stable/data/data_catalog.html


########## Data Sources ##########
source_hdb_resale_prices:
  type: pandas.CSVDataset
  filepath: s3://sec-national-coding-week/kedro_workshop/source_data/resale-flat-prices-big-set.csv
  fs_args:
    anon: true  # Enable anonymous access
  credentials: null

source_mrt_stations:
  type: pandas.ExcelDataset
  filepath: s3://sec-national-coding-week/kedro_workshop/source_data/mrt_stations.xlsx
  credentials: null
  fs_args:
    anon: true  # Enable anonymous access
  load_args:
    engine: openpyxl

source_hdb_address_geodata:
  type: pandas.CSVDataset
  filepath: s3://sec-national-coding-week/kedro_workshop/source_data/address_geolocations.csv
  credentials: null
  fs_args:
    anon: true  # Enable anonymous access

source_mrt_geodata:
  type: api.APIDataset
  url: https://overpass-api.de/api/interpreter
  load_args:
    params:
      data: >
        [out:json];
        area["ISO3166-1"="SG"][admin_level=2];
        node(area)["subway"="yes"];
        out;

source_mall_geodata:
  type: api.APIDataset
  url: https://overpass-api.de/api/interpreter
  load_args:
    params:
      data: >
        [out:json];
        area["ISO3166-1"="SG"][admin_level=2]->.sg;
        (
          node["shop"="mall"](area.sg);
          way["shop"="mall"](area.sg);
          relation["shop"="mall"](area.sg);
        );
        out center;


########## staging Data ##########

staging_hdb_resale_prices:
  type: pandas.CSVDataset
  filepath: data/01_staging/hdb_resale_prices.csv

staging_mrt_stations:
  type: pandas.ExcelDataset
  filepath: data/01_staging/mrt_stations.xlsx
  load_args:
    engine: 'openpyxl'

staging_hdb_address_geodata:
  type: pandas.CSVDataset
  filepath: data/01_staging/address_geodata.csv

staging_mrt_geodata:
  type: json.JSONDataset
  filepath: data/01_staging/mrt_geodata.json

staging_mall_geodata:
  type: json.JSONDataset
  filepath: data/01_staging/mall_geodata.json


########## Clean Data ##########
# Note: Using CSV format for workshop accessibility - as it can easily
# be inspected with Excel or text editors. In production, consider Parquet
# for better performance and storage efficiency.

clean_hdb_resale_prices:
  type: pandas.CSVDataset
  filepath: data/02_clean/hdb_resale_prices.csv

clean_mrt_stations:
  type: pandas.CSVDataset
  filepath: data/02_clean/mrt_stations.csv

clean_hdb_address_geodata:
  type: pandas.CSVDataset
  filepath: data/02_clean/address_geodata.csv

clean_mrt_geodata:
  type: pandas.CSVDataset
  filepath: data/02_clean/mrt_geodata.csv

clean_mall_geodata:
  type: pandas.CSVDataset
  filepath: data/02_clean/mall_geodata.csv


########## Transformed Analytics Data ##########
transformed_feature_set:
  type: pandas.CSVDataset
  filepath: data/03_feature/feature_set.csv


########## Model Data ##########
linear_regression_model:
  type: pickle.PickleDataset
  filepath: data/04_model/linear_regression_model.pkl

model_info:
  type: json.JSONDataset
  filepath: data/04_model/model_info.json

model_performance_report:
  type: pandas.CSVDataset
  filepath: data/04_model/model_performance_report.csv

model_plots:
  type: matplotlib.MatplotlibWriter
  filepath: data/04_model/model_analysis_plots.png
